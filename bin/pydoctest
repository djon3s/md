#!/usr/bin/env python

from __future__ import absolute_import
import os, sys, doctest
from optparse import OptionParser
from os.path import exists, join, dirname, realpath, splitext, normpath

## Relative to top-level package
TESTFILE_FOLDERS = ('../docs', '../tests', '../regression')

TESTFILE_EXT = ('.rst', '.txt')

DOCTEST_OPTIONS = (
    doctest.ELLIPSIS
    | doctest.DONT_ACCEPT_TRUE_FOR_1
    | doctest.IGNORE_EXCEPTION_DETAIL
)

def DOCTEST_EXTRA_GLOBALS():
    """See: http://bugs.python.org/issue5021"""
    return dict(__name__='BUG_5021')


### doctest

def test_all(modules, folders=None, ext=None):
    folders = folders or TESTFILE_FOLDERS
    ext = ext or TESTFILE_EXT

    for mod in modules:
	testmod(mod)
	for path in find_testfiles(mod, folders, ext):
	    testfile(path)

    return doctest.master

def testmod(mod):
    """Run inline doctests for module mod."""
    trace('testmod', mod.__name__)
    return doctest.testmod(
	    mod,
	    optionflags=DOCTEST_OPTIONS,
	    extraglobs=DOCTEST_EXTRA_GLOBALS()
    )

def testfile(path):
    """Run the doctest testfile located at path."""
    trace('testfile', path)
    return doctest.testfile(
	    path,
	    module_relative=False,
	    optionflags=DOCTEST_OPTIONS,
	    extraglobs=DOCTEST_EXTRA_GLOBALS()
    )

def find_testfiles(mod, folders, ext):
    """Iterate over testfile candidates for a module."""

    name = mod.__name__
    filenames = [name + e for e in ext]
    package = realpath(absolute_package_dir(mod))

    for folder in folders:
	for filename in filenames:
	    path = normpath(join(package, folder, filename))
	    if exists(path):
		yield path
	    else:
		trace('not-found', path, level=2)

def totals(runner):
    tests = failures = 0
    for (name, (f, t)) in runner._name2ft.items():
	tests += t; failures += f
    return failures, tests

def summarize(runner):
    passed = []; failed = []; tests = failures = 0

    for item in runner._name2ft.items():
	name, (f, t) = item
	if t:
	    tests += t; failures += f
	    (failed if f else passed).append(item)

    print '' # newline

    if passed:
	print 'Passed:', (tests - failures)
	for (name, (f, t)) in sorted(passed):
	    print ' %3d tests in %s' % (t, name)

    if failed:
	print 'Failed:', failures
	for (name, (f, t)) in sorted(failed):
	    print ' %3d of %3d in %s' % (f, t, name)

    if failed:
	print '\nTESTS FAILED!'
    else:
	print '\nTests passed.'

    return failures, tests


### Utility

def module(name):
    """Return the module associated with name, importing it if
    necessary.  Assume absolute imports."""
    try:
	mod = sys.modules[name]
    except KeyError:
	if '.' in name:
	    (package, module) = name.rsplit('.', 1)
	    mod = getattr(
		__import__(package, fromlist=[module], level=0),
		module
	    )
	else:
	    mod = __import__(name)
    return mod

def absolute_package_dir(mod):
    """Return the directory of the absolute root-package of mod.

    If mod is bound to the module foo.bar.baz,
    absolute_package_dir(mod) => '/path/to/foo/'.
    """
    top = module(mod.__name__.split('.', 1)[0])
    return dirname(top.__file__)

def remove_testfile_ext(name, ext=TESTFILE_EXT):
    (prefix, suffix) = splitext(name)
    ext = ext or TESTFILE_EXT
    return prefix if suffix in ext else name


### Main Program

__trace__ = 0

def trace(label, *args, **kwargs):
    if kwargs.get('level', 1) <= __trace__:
	print '%s %s' % (label, ' '.join(repr(a) for a in args))

def comma_list(name, options=None):
    """Split a list of comma-separated items into items.  If options
    is None, look for name in os.environ.

    >>> comma_list('FOO', ['foo, bar', 'mumble'])
    ['foo', 'bar', 'mumble']
    """
    if options is None and name in os.environ:
	options = (os.environ[name],)
    return options and [x.strip() for o in options for x in o.split(',')]

def optparser():
    parser = OptionParser(usage='usage: %prog [options] module ...')
    parser.add_option(
	'-e', action='append', dest='ext',
	help='Test filename extensions (default: ".txt, .rst")'
    )
    parser.add_option(
	'-f', action='append', dest='folders',
	help=('Folders relative to the top-level package in which'
	      ' to search for test files'
	      ' (default: "../docs, ../tests, ../regression")')
    )
    parser.add_option(
	'-s', action='store_true', dest='summary', default=False,
	help='Print a summary of the test results.'
    )
    parser.add_option(
	'-t', action='count', dest='trace', default=__trace__,
	help='Trace which modules and testfiles are being examined.'
    )
    parser.add_option(
	'-v', action='store_true', dest='verbose', default=False,
	help='Show all tests and their results.'
    )
    return parser

def main():
    global __trace__

    opt, mod_names = optparser().parse_args()

    __trace__ = opt.trace
    folders = comma_list('TESTFILE_FOLDERS', opt.folders)
    ext = comma_list('TESTFILE_EXT', opt.ext)
    modules = (module(remove_testfile_ext(n, ext)) for n in mod_names)

    runner = test_all(modules, folders, ext)
    if opt.summary:
	failed, tested = summarize(runner)
    else:
	failed, tested = totals(runner)

    sys.exit(1 if failed else 0)

if __name__ == '__main__':
    main()
